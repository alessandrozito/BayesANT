// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_probs
arma::vec compute_probs(const arma::mat& M, const arma::vec& y, const arma::vec& priors);
RcppExport SEXP _BayesANT_compute_probs(SEXP MSEXP, SEXP ySEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_probs(M, y, priors));
    return rcpp_result_gen;
END_RCPP
}
// log_MultKmers_cpp
double log_MultKmers_cpp(const arma::rowvec& x, const arma::rowvec& x_tilde);
RcppExport SEXP _BayesANT_log_MultKmers_cpp(SEXP xSEXP, SEXP x_tildeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type x_tilde(x_tildeSEXP);
    rcpp_result_gen = Rcpp::wrap(log_MultKmers_cpp(x, x_tilde));
    return rcpp_result_gen;
END_RCPP
}
// compute_probs_MultKmers
arma::vec compute_probs_MultKmers(const arma::mat& K, const arma::vec& priors, const arma::rowvec& new_kmers);
RcppExport SEXP _BayesANT_compute_probs_MultKmers(SEXP KSEXP, SEXP priorsSEXP, SEXP new_kmersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type new_kmers(new_kmersSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_probs_MultKmers(K, priors, new_kmers));
    return rcpp_result_gen;
END_RCPP
}
// compute_probs_nucl_and_kmers
arma::vec compute_probs_nucl_and_kmers(const arma::mat& M, const arma::mat& K, const arma::vec& y, const arma::rowvec& new_kmers, const arma::vec& priors);
RcppExport SEXP _BayesANT_compute_probs_nucl_and_kmers(SEXP MSEXP, SEXP KSEXP, SEXP ySEXP, SEXP new_kmersSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type new_kmers(new_kmersSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_probs_nucl_and_kmers(M, K, y, new_kmers, priors));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesANT_compute_probs", (DL_FUNC) &_BayesANT_compute_probs, 3},
    {"_BayesANT_log_MultKmers_cpp", (DL_FUNC) &_BayesANT_log_MultKmers_cpp, 2},
    {"_BayesANT_compute_probs_MultKmers", (DL_FUNC) &_BayesANT_compute_probs_MultKmers, 3},
    {"_BayesANT_compute_probs_nucl_and_kmers", (DL_FUNC) &_BayesANT_compute_probs_nucl_and_kmers, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesANT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
